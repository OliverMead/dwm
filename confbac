/* See LICENSE file for copyright and license details. */

#include <X11/XF86keysym.h>

/* appearance */
static const unsigned int baralpha = 0xb3;
static const unsigned int borderalpha = 0xb3;

static const unsigned int borderpx = 1; /* border pixel of windows */
static const unsigned int gappx = 5;
static const unsigned int snap = 16; /* snap pixel */
static const int showbar = 1;        /* 0 means no bar */
static const int topbar = 1;         /* 0 means bottom bar */
static const char *fonts[] = {"Fira Code:size=10"};
static const char dmenufont[] = "Fira Code:size=10";
static const char col_gray1[] = "#282828";
static const char col_gray2[] = "#444444";
static const char col_gray3[] = "#928374";
static const char col_gray4[] = "#fbf1c7";
static const char col_orange[] = "#F08E33";
static const char col_blue[] = "#458588";
static const char *colors[][3] = {
    /*               fg         bg         border   */
    [SchemeNorm] = {col_gray4, col_gray1, col_gray2},
    [SchemeSel] = {col_gray1, col_orange, col_orange},
    [SchemeHid] = {col_orange, col_gray1, col_orange},
};
static const unsigned int alphas[][3] = {
    /*               fg      bg        border     */
    [SchemeNorm] = {OPAQUE, baralpha, borderalpha},
    [SchemeSel] = {OPAQUE, baralpha, borderalpha},
};

/* tagging */
static const char *tags[] = {"", "", "", "", "", "", "", "", ""};

static const Rule rules[] = {
    /* xprop(1):
     *  WM_CLASS(STRING) = instance, class
     *  WM_NAME(STRING) = title
     */
    /*  class        instance  title        tags-mask  isfloating  monitor  */
    {"Gimp", NULL, NULL, 0, 1, -1},
    {"firefox", NULL, NULL, 1 << 8, 0, -1},
    {"Spotify", NULL, NULL, 1 << 2, 0, -1},
    {"htop", NULL, NULL, 1 << 6, 0, -1},
    {"blender", NULL, NULL, 1 << 3, 0, -1},
    {"Telegram", NULL, NULL, 1 << 7, 0, -1},
    {"Steam", NULL, NULL, 1 << 2, 0, -1},
    {"Zathura", NULL, NULL, 1 << 1, 0, -1},
    {"Emacs", NULL, "Emacs", 1, 0, -1},
    {"st", NULL, "htop", 1 << 6, 0, -1},
    {"st", NULL, "calcurse", 1 << 5, 0, -1},
};

/* layout(s) */
static const float mfact = 0.60; /* factor of master area size [0.05..0.95] */
static const int nmaster = 1;    /* number of clients in master area */
static const int resizehints =
    1; /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
    /* symbol     arrange function */
    {"[]=", tile}, /* first entry is default */
    {"><>", NULL}, /* no layout function means floating behavior */
    {"[M]", monocle},
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY, TAG)                                                      \
  {MODKEY, KEY, view, {.ui = 1 << TAG}},                                       \
      {MODKEY | ControlMask, KEY, toggleview, {.ui = 1 << TAG}},               \
      {MODKEY | ShiftMask, KEY, tag, {.ui = 1 << TAG}},                        \
      {MODKEY | ControlMask | ShiftMask, KEY, toggletag, {.ui = 1 << TAG}},

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd)                                                             \
  {                                                                            \
    .v = (const char *[]) { "/bin/sh", "-c", cmd, NULL }                       \
  }

/* commands */
static char dmenumon[2] =
    "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = {
    "dmenu_run", "-m",  dmenumon,   "-fn", dmenufont, "-nb", col_gray1, "-nf",
    col_gray3,   "-sb", col_orange, "-sf", col_gray4, NULL};
static const char *termcmd[] = {"st",        "-t",
                                "tmux-main", "-e",
                                "tmux",      "new-session",
                                "-A",        "-n",
                                "editor",    "-s",
                                "main",      "nvim",
                                "--listen",  "/tmp/nvimsocket",
                                "+terminal", "+start",
                                NULL};
static const char *basictermcmd[] = {"st", NULL};
static const char *browsercmd[] = {"env", "GDK_DPI_SCALE=1.5", "firefox", NULL};
static const char *comptoncmd[] = {"killall compton && compton", NULL};
static const char *rangercmd[] = {"st", "-t", "ranger", "-e", "ranger", NULL};
static const char *calcmd[] = {"st", "-t", "calcurse", "-e", "calcurse", NULL};
static const char *htopcmd[] = {"st", "-t", "htop", "-e", "htop", NULL};
static const char *snipcmd[] = {"xfce4-screenshooter -r", NULL};
static const char *mutecmd[] = {
    "pactl", "set-sink-mute", "@DEFAULT_SINK@", "toggle", "&&",
    "pkill", "-RTMIN+10",     "dwmblocks",      NULL};
static const char *volupcmd[] = {
    "pactl", "set-sink-volume", "@DEFAULT_SINK@", "+2%", "&&",
    "pkill", "-RTMIN+10",       "dwmblocks",      NULL};
static const char *voldncmd[] = {
    "pactl", "set-sink-volume", "@DEFAULT_SINK@", "-2%", "&&",
    "pkill", "-RTMIN+10",       "dwmblocks",      NULL};
static const char *bcklightupcmd[] = {"brightnessctl", "s", "10%+", NULL};
static const char *bcklightdncmd[] = {"brightnessctl", "s", "10%-", NULL};
static const char *pausecmd[] = {"playerctl", "play-pause", "&&", "pkill",
                                 "-RTMIN+11", "dwmblocks",  NULL};
static const char *pnextcmd[] = {"playerctl", "next",      "&&", "pkill",
                                 "-RTMIN+11", "dwmblocks", NULL};
static const char *pprevcmd[] = {"playerctl", "next",      "&&", "pkill",
                                 "-RTMIN+11", "dwmblocks", NULL};
static const char mousename[] = "\"SynPS/2 Synaptics TouchPad\"";
static const char *nomousecmd[] = {"xinput",  "disable",   mousename, "&&",
                                   "killall", "unclutter", NULL};
static const char *enmousecmd[] = {"xinput",    "enable", mousename, "&&",
                                   "unclutter", "-idle",  "0",       NULL};
static const char *lockercmd[] = {"i3lock-fancy-rapid", "50", "2", NULL};

static Key keys[] = {
    /* modifier                     key        function        argument */
    {MODKEY, XK_p, spawn, {.v = dmenucmd}},
    {MODKEY | ShiftMask, XK_Return, spawn, {.v = termcmd}},
    {MODKEY, XK_b, togglebar, {0}},
    {MODKEY, XK_j, focusstack, {.i = +1}},
    {MODKEY, XK_k, focusstack, {.i = -1}},
    {MODKEY, XK_i, incnmaster, {.i = +1}},
    {MODKEY, XK_d, incnmaster, {.i = -1}},
    {MODKEY, XK_h, setmfact, {.f = -0.05}},
    {MODKEY, XK_l, setmfact, {.f = +0.05}},
    {MODKEY, XK_Return, zoom, {0}},
    {MODKEY, XK_Tab, view, {0}},
    {MODKEY | ShiftMask, XK_c, killclient, {0}},
    {MODKEY, XK_t, setlayout, {.v = &layouts[0]}},
    {MODKEY, XK_f, setlayout, {.v = &layouts[1]}},
    {MODKEY, XK_m, setlayout, {.v = &layouts[2]}},
    {MODKEY, XK_space, setlayout, {0}},
    {MODKEY, XK_BackSpace, togglefullscr, {0}},
    {MODKEY | ShiftMask, XK_space, togglefloating, {0}},
    {MODKEY, XK_0, view, {.ui = ~0}},
    {MODKEY | ShiftMask, XK_0, tag, {.ui = ~0}},
    {MODKEY, XK_comma, focusmon, {.i = -1}},
    {MODKEY, XK_period, focusmon, {.i = +1}},
    {MODKEY | ShiftMask, XK_comma, tagmon, {.i = -1}},
    {MODKEY | ShiftMask, XK_period, tagmon, {.i = +1}},
    {MODKEY, XK_minus, setgaps, {.i = -1}},
    {MODKEY, XK_equal, setgaps, {.i = +1}},
    {MODKEY | ShiftMask, XK_equal, setgaps, {.i = 0}},
    TAGKEYS(XK_1, 0) TAGKEYS(XK_2, 1) TAGKEYS(XK_3, 2) TAGKEYS(XK_4, 3)
        TAGKEYS(XK_5, 4) TAGKEYS(XK_6, 5) TAGKEYS(XK_7, 6) TAGKEYS(XK_8, 7)
            TAGKEYS(XK_9, 8){MODKEY | ShiftMask, XK_e, quit, {0}},
    {MODKEY | Mod1Mask, XK_Return, spawn, {.v = basictermcmd}},
    {MODKEY | ControlMask, XK_f, spawn, {.v = rangercmd}},
    {MODKEY | ShiftMask, XK_f, spawn, {.v = browsercmd}},
    {MODKEY, XK_Escape, spawn, {.v = htopcmd}},
    {MODKEY, XK_c, spawn, {.v = calcmd}},
    {MODKEY | ShiftMask, XK_Print, spawn, {.v = snipcmd}},
    {MODKEY | ShiftMask, XK_m, spawn, {.v = nomousecmd}},
    {MODKEY | ControlMask, XK_m, spawn, {.v = enmousecmd}},
    {MODKEY, XK_Delete, spawn, {.v = lockercmd}},
    {0, XF86XK_AudioMute, spawn, {.v = mutecmd}},
    {0, XF86XK_AudioLowerVolume, spawn, {.v = voldncmd}},
    {0, XF86XK_AudioRaiseVolume, spawn, {.v = volupcmd}},
    {0, XF86XK_AudioPlay, spawn, {.v = pausecmd}},
    {0, XF86XK_AudioPrev, spawn, {.v = pprevcmd}},
    {0, XF86XK_AudioNext, spawn, {.v = pnextcmd}},
    {0, XF86XK_MonBrightnessUp, spawn, {.v = bcklightupcmd}},
    {0, XF86XK_MonBrightnessDown, spawn, {.v = bcklightdncmd}},
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
 * ClkClientWin, or ClkRootWin */
static Button buttons[] = {
    /* click                event mask      button          function argument
     */
    {ClkLtSymbol, 0, Button1, setlayout, {0}},
    {ClkLtSymbol, 0, Button3, setlayout, {.v = &layouts[2]}},
    {ClkWinTitle, 0, Button1, togglewin, {0}},
    {ClkWinTitle, 0, Button2, zoom, {0}},
    {ClkStatusText, 0, Button2, spawn, {.v = termcmd}},
    {ClkClientWin, MODKEY, Button1, movemouse, {0}},
    {ClkClientWin, MODKEY, Button2, togglefloating, {0}},
    {ClkClientWin, MODKEY, Button3, resizemouse, {0}},
    {ClkTagBar, 0, Button1, view, {0}},
    {ClkTagBar, 0, Button3, toggleview, {0}},
    {ClkTagBar, MODKEY, Button1, tag, {0}},
    {ClkTagBar, MODKEY, Button3, toggletag, {0}},
};
